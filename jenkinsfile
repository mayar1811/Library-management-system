
pipeline {
    agent any

// Define environment variables for Docker, Kubernetes, and AWS CLI paths, credentials, and configurations
    environment {
        DOCKER_IMAGE = 'mayaremam/library_management_system_flask'
        DOCKER_CREDENTIALS = 'dockerhub-credentials'
        KUBECONFIG_PATH = 'C:\\Users\\Dell\\.kube\\config'
        TERRAFORM_EXEC_PATH = 'C:\\terraform\\terraform_1.9.3_windows_amd64\\terraform.exe'
        TERRAFORM_CONFIG_PATH = 'C:\\Users\\Dell\\my-terraform-project'
        AWS_CLI_PATH = 'C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe'
        KUBECTL_PATH = 'C:\\tools\\kubectl.exe' 
        AWS_PROFILE = '${aws-profile}'
        NAMESPACE = 'team6'
    }

    options {
	// Set a timeout for the entire pipeline and keep only the last 10 builds
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('CI: Build and Test') {
            stages {
                stage('Setup AWS CLI') {
                    steps {
			// Configure AWS CLI with credentials and region
                        withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                            bat """
                            "${env.AWS_CLI_PATH}" configure set aws_access_key_id %AWS_ACCESS_KEY_ID% --profile ${env.AWS_PROFILE}
                            "${env.AWS_CLI_PATH}" configure set aws_secret_access_key %AWS_SECRET_ACCESS_KEY% --profile ${env.AWS_PROFILE}
                            "${env.AWS_CLI_PATH}" configure set region us-east-1 --profile ${env.AWS_PROFILE}
                            """
                        }
                    }
                }

                stage('Build Docker Image') {
                    steps {
                        script {
			    // Build the Docker image using the specified image name and build number
                            echo "Building Docker image ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                            bat "docker build -t ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
                        }
                    }
                }
            }
        }

        stage('CD: Deploy') {
            stages {
                stage('Terraform Init and Apply') {
                    steps {
			// Initialize and apply Terraform configuration to provision AWS resources
                        dir("${env.TERRAFORM_CONFIG_PATH}") {
                            bat """
                            set AWS_PROFILE=${env.AWS_PROFILE}
                            "${env.TERRAFORM_EXEC_PATH}" init
                            "${env.TERRAFORM_EXEC_PATH}" apply -auto-approve
                            """
                        }
                    }
                }

                stage('Extract EKS Cluster Name') {
                    steps {
                        script {
			    // Extract the EKS cluster name from Terraform output
                            dir("${env.TERRAFORM_CONFIG_PATH}") {
                                env.EKS_CLUSTER_NAME = bat(script: """
                                    @echo off
                                    "${env.TERRAFORM_EXEC_PATH}" output -raw eks_cluster_name
                                """, returnStdout: true).trim()
                                echo "EKS Cluster Name is set to ${env.EKS_CLUSTER_NAME}"
                            }
                        }
                    }
                }

                stage('Configure Kubeconfig') {
                    steps {
                        script {
			    // Configure kubeconfig to use the extracted EKS cluster name
                            echo "Configuring kubeconfig for EKS Cluster: ${env.EKS_CLUSTER_NAME}"
                            bat """
				 // This allows kubectl to interact with the EKS cluster
                                "${env.AWS_CLI_PATH}" eks update-kubeconfig --region us-east-1 --name "${env.EKS_CLUSTER_NAME}" --kubeconfig "${env.KUBECONFIG_PATH}" --profile MayarHossam
                            """
                            env.KUBECONFIG = "${env.KUBECONFIG_PATH}"
                            echo "KUBECONFIG is set to ${env.KUBECONFIG}"
                        }
                    }
                }

                stage('Push Docker Image') {
                    steps {
			// Push the built Docker image to Docker Hub
                        script {
                            echo "Pushing Docker image ${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                            withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                                bat """
                                echo Logging into Docker Hub...
                                docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%
                                docker tag ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ${DOCKER_IMAGE}:latest
                                docker push ${DOCKER_IMAGE}:${env.BUILD_NUMBER}
                                docker push ${DOCKER_IMAGE}:latest
                                """
                            }
                        }
                    }
                }

                stage('Deploy to Kubernetes') {
                    steps {
			// Deploy the Dockerized application to the Kubernetes cluster
                        script {
                            echo "Deploying to Kubernetes namespace: ${NAMESPACE}"
                            bat """
				// Create namespace if it does not exist
                                "${env.KUBECTL_PATH}" create namespace ${NAMESPACE} --dry-run=client -o yaml | "${env.KUBECTL_PATH}" apply -f -
				//Apply the Persistent Volume configuration,Persistent Volume Claim configuration,Deployment configuration,and Service configuration
                                "${env.KUBECTL_PATH}" apply -f ${env.WORKSPACE}\\k8s\\persistent-volume.yaml -n ${NAMESPACE}
                                "${env.KUBECTL_PATH}" apply -f ${env.WORKSPACE}\\k8s\\persistent-volume-claim.yaml -n ${NAMESPACE}
                                "${env.KUBECTL_PATH}" apply -f ${env.WORKSPACE}\\k8s\\deployment.yaml -n ${NAMESPACE}
                                "${env.KUBECTL_PATH}" apply -f ${env.WORKSPACE}\\k8s\\service.yaml -n ${NAMESPACE}
                            """
                        }
                    }
                }
            }
        }
    }
     // Post actions for success, failure, and always
    post {
	//if the pipeline succeeded it will say 'CI/CD pipeline completed successfully.'
        success {
            echo 'CI/CD pipeline completed successfully.'
        }
	//if the pipeline failed it will say 'CI/CD pipeline failed.'
        failure {
            echo 'CI/CD pipeline failed.'
        }
	//will always say "Cleaning up.." regardless of the state of the pipeline
        always {
            echo 'Cleaning up...'
        }
    }
}
