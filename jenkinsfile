pipeline {
    agent any

    environment {
        DOCKER_IMAGE = '${docker-image}'
        DOCKER_CREDENTIALS = 'dockerhub-credentials'
        KUBECONFIG_PATH = '${kubeconfig}'
        TERRAFORM_EXEC_PATH = '${terraform-exec}'
        TERRAFORM_CONFIG_PATH = '${terraform-config}'
        AWS_CLI_PATH = 'C:\\Program Files\\Amazon\\AWSCLIV2\\aws.exe'
        KUBECTL_PATH = '${kubectl}'
        AWS_PROFILE = '${aws-profile}'
        NAMESPACE = '${namespace}'
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('CI: Build and Test') {
            stages {
                stage('Setup AWS CLI') {
                    steps {
                        withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                            bat """
                            "%AWS_CLI_PATH%" configure set aws_access_key_id %AWS_ACCESS_KEY_ID% --profile %AWS_PROFILE%
                            "%AWS_CLI_PATH%" configure set aws_secret_access_key %AWS_SECRET_ACCESS_KEY% --profile %AWS_PROFILE%
                            "%AWS_CLI_PATH%" configure set region us-east-1 --profile %AWS_PROFILE%
                            """
                        }
                    }
                }

                stage('Build Docker Image') {
                    steps {
                        script {
                            echo "Building Docker image ${env.DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                            bat "docker build -t ${env.DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
                        }
                    }
                }
            }
        }

        stage('CD: Deploy') {
            stages {
                stage('Terraform Init and Apply') {
                    steps {
                        dir("${env.TERRAFORM_CONFIG_PATH}") {
                            bat """
                            set AWS_PROFILE=%AWS_PROFILE%
                            "%TERRAFORM_EXEC_PATH%" init
                            "%TERRAFORM_EXEC_PATH%" apply -auto-approve
                            """
                        }
                    }
                }

                stage('Extract EKS Cluster Name') {
                    steps {
                        script {
                            dir("${env.TERRAFORM_CONFIG_PATH}") {
                                env.EKS_CLUSTER_NAME = bat(script: """
                                    @echo off
                                    "%TERRAFORM_EXEC_PATH%" output -raw eks_cluster_name
                                """, returnStdout: true).trim()
                                echo "EKS Cluster Name is set to ${env.EKS_CLUSTER_NAME}"
                            }
                        }
                    }
                }

                stage('Configure Kubeconfig') {
                    steps {
                        script {
                            echo "Configuring kubeconfig for EKS Cluster: ${env.EKS_CLUSTER_NAME}"
                            bat """
                                "%AWS_CLI_PATH%" eks update-kubeconfig --region us-east-1 --name "${env.EKS_CLUSTER_NAME}" --kubeconfig "${env.KUBECONFIG_PATH}" --profile %AWS_PROFILE%
                            """
                            env.KUBECONFIG = "${env.KUBECONFIG_PATH}"
                            echo "KUBECONFIG is set to ${env.KUBECONFIG}"
                        }
                    }
                }

                stage('Push Docker Image') {
                    steps {
                        script {
                            echo "Pushing Docker image ${env.DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                            withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                                bat """
                                echo Logging into Docker Hub...
                                docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%
                                docker tag ${env.DOCKER_IMAGE}:${env.BUILD_NUMBER} ${env.DOCKER_IMAGE}:latest
                                docker push ${env.DOCKER_IMAGE}:${env.BUILD_NUMBER}
                                docker push ${env.DOCKER_IMAGE}:latest
                                """
                            }
                        }
                    }
                }

                stage('Deploy to Kubernetes') {
                    steps {
                        script {
                            echo "Deploying to Kubernetes namespace: ${env.NAMESPACE}"
                            bat """
                                "%KUBECTL_PATH%" create namespace %NAMESPACE% --dry-run=client -o yaml | "%KUBECTL_PATH%" apply -f -
                                "%KUBECTL_PATH%" apply -f ${env.WORKSPACE}\\k8s\\persistent-volume.yaml -n %NAMESPACE%
                                "%KUBECTL_PATH%" apply -f ${env.WORKSPACE}\\k8s\\persistent-volume-claim.yaml -n %NAMESPACE%
                                "%KUBECTL_PATH%" apply -f ${env.WORKSPACE}\\k8s\\deployment.yaml -n %NAMESPACE%
                                "%KUBECTL_PATH%" apply -f ${env.WORKSPACE}\\k8s\\service.yaml -n %NAMESPACE%
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'CI/CD pipeline completed successfully.'
        }
        failure {
            echo 'CI/CD pipeline failed.'
        }
        always {
            echo 'Cleaning up...'
        }
    }
}
